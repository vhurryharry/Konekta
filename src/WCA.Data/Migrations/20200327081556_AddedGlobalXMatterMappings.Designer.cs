// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WCA.Data;

namespace WCA.Data.Migrations
{
    [DbContext(typeof(WCADbContext))]
    [Migration("20200327081556_AddedGlobalXMatterMappings")]
    partial class AddedGlobalXMatterMappings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("WCA")
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AccessTokenExpiryUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionstepOrgKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("int");

                    b.Property<string>("IdToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LockExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReceivedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActionstepOrgKey");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ActionstepCredentials");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepCredentialSubstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ForOwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubstituteWithOwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ForOwnerId");

                    b.HasIndex("SubstituteWithOwnerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ActionstepCredentialSubstitutions");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepOrg", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ActionstepOrgs");

                    b.HasData(
                        new
                        {
                            Key = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "All Orgs"
                        });
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.PexaWorkspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionstepOrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatterId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkspaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkspaceUri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("PexaWorkspaces");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXDocumentVersionState", b =>
                {
                    b.Property<Guid>("DocumentVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionstepActionDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActionstepSharePointUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentCopyStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DocumentCopyStatusUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GlobalXUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MatterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DocumentVersionId");

                    b.HasIndex("ActionstepOrgKey");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DocumentCopyStatus");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MatterId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("GlobalXDocumentVersionStates");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXMatterMapping", b =>
                {
                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GlobalXMatterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActionstepMatterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActionstepOrgKey", "GlobalXMatterId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("GlobalXMatterMappings");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXOrgSettings", b =>
                {
                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActionstepSyncUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DocumentSyncEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("GlobalXAdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastDocumentSyncUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LatestTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumMatterIdToSync")
                        .HasColumnType("int");

                    b.Property<int?>("TaxCodeIdNoGST")
                        .HasColumnType("int");

                    b.Property<int?>("TaxCodeIdWithGST")
                        .HasColumnType("int");

                    b.Property<bool>("TransactionSyncEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActionstepOrgKey");

                    b.HasIndex("ActionstepSyncUserId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GlobalXAdminId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("GlobalXOrgSettings");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXTransactionState", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreditForTransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GSTFreeDisbursementId")
                        .HasColumnType("int");

                    b.Property<int?>("GSTTaxableDisbursementId")
                        .HasColumnType("int");

                    b.Property<string>("GlobalXCustomerRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlobalXUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MatterBasedInvoiced")
                        .HasColumnType("bit");

                    b.Property<string>("MatterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProcessingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ProcessingStatusUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSubGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RetailGst")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SearchReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("WholesaleGst")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("WholesalePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("TransactionId");

                    b.HasIndex("ActionstepOrgKey");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MatterId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProcessingStatus");

                    b.HasIndex("UpdatedById");

                    b.ToTable("GlobalXTransactionStates");
                });

            modelBuilder.Entity("WCA.Domain.InfoTrack.InfoTrackOrder", b =>
                {
                    b.Property<int>("InfoTrackOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ActionstepDisbursementStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionstepDisbursementStatusUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionstepDocumentUploadStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionstepDocumentUploadStatusUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionstepMatterId")
                        .HasColumnType("int");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InfoTrackAvailableOnline")
                        .HasColumnType("bit");

                    b.Property<string>("InfoTrackBillingTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackClientReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InfoTrackDateCompletedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InfoTrackDateOrderedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InfoTrackDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackDownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackFileHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InfoTrackIsBillable")
                        .HasColumnType("bit");

                    b.Property<string>("InfoTrackOnlineUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackOrderedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfoTrackParentOrderId")
                        .HasColumnType("int");

                    b.Property<string>("InfoTrackReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InfoTrackRetailerFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackRetailerFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackRetailerFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InfoTrackRetailerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackStatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InfoTrackSupplierFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackSupplierFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackSupplierFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderedByWCAUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Reconciled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InfoTrackOrderId");

                    b.HasIndex("ActionstepOrgKey");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderedByWCAUserId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("InfoTrackOrders");
                });

            modelBuilder.Entity("WCA.Domain.InfoTrack.InfoTrackOrderUpdateMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InfoTrackAvailableOnline")
                        .HasColumnType("bit");

                    b.Property<string>("InfoTrackBillingTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackClientReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InfoTrackDateCompletedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InfoTrackDateOrderedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InfoTrackDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackDownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackFileHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InfoTrackIsBillable")
                        .HasColumnType("bit");

                    b.Property<string>("InfoTrackOnlineUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfoTrackOrderId")
                        .HasColumnType("int");

                    b.Property<string>("InfoTrackOrderedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfoTrackParentOrderId")
                        .HasColumnType("int");

                    b.Property<string>("InfoTrackReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InfoTrackRetailerFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackRetailerFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackRetailerFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InfoTrackRetailerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackStatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InfoTrackSupplierFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackSupplierFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackSupplierFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProcessingStatusUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("InfoTrackOrderUpdateMessageHistory");
                });

            modelBuilder.Entity("WCA.Domain.Integrations.Integration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ComingSoon")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoHref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Title");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Integrations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dde37c19-c431-4406-a0c5-2670085b84b0"),
                            ComingSoon = false,
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoAlt = "PEXA Logo",
                            LogoHref = "https://www.pexa.com.au/",
                            LogoSrc = "/images/pexa-logo.svg",
                            LogoWidth = "100px",
                            Title = "PEXA"
                        },
                        new
                        {
                            Id = new Guid("5f9c8e97-deab-42f9-8678-0fb55da7d53c"),
                            ComingSoon = false,
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoAlt = "InfoTrack Logo",
                            LogoHref = "https://www.infotrack.com.au/",
                            LogoSrc = "/images/InfoTrackLogo_216x80.png",
                            LogoWidth = "100px",
                            Title = "InfoTrack"
                        },
                        new
                        {
                            Id = new Guid("d89cc4ac-e709-41a1-aa08-dd47c728b88f"),
                            ComingSoon = false,
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoAlt = "Calculators icon",
                            LogoHref = "https://www.konekta.com.au/",
                            LogoSrc = "/images/conveyancing-calculators.png",
                            LogoWidth = "80px",
                            Title = "Conveyancing Calculators"
                        },
                        new
                        {
                            Id = new Guid("4b5c4f21-ad76-4847-96a5-c067865fff5b"),
                            ComingSoon = true,
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoAlt = "First Title Logo",
                            LogoHref = "https://www.firsttitle.com.au/",
                            LogoSrc = "/images/firsttitle-logo.svg",
                            LogoWidth = "100px",
                            Title = "First Title"
                        },
                        new
                        {
                            Id = new Guid("40760360-a77c-4a5a-af9e-b03321909e80"),
                            ComingSoon = true,
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoAlt = "GlobalX Logo",
                            LogoHref = "https://globalx.com.au/",
                            LogoSrc = "/images/globalx-logo.png",
                            LogoWidth = "150px",
                            Title = "GlobalX"
                        },
                        new
                        {
                            Id = new Guid("f411b5e1-2762-4374-ab81-228b7b13b22a"),
                            ComingSoon = true,
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoAlt = "The Search People Logo",
                            LogoHref = "https://thesearchpeople.com.au/",
                            LogoSrc = "/images/the-search-people-logo.png",
                            LogoWidth = "150px",
                            Title = "The Search People"
                        });
                });

            modelBuilder.Entity("WCA.Domain.Integrations.IntegrationLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IntegrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBeta")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReactLink")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OpenInNewWindow")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToolTip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IntegrationId");

                    b.HasIndex("Title");

                    b.HasIndex("UpdatedById");

                    b.ToTable("IntegrationLinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2648bf7-f4d4-48c3-8cf7-16338196d991"),
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disabled = false,
                            Href = "/pexa/create-workspace?actionsteporg={actionstepOrg}&matterid={matterId}",
                            IntegrationId = new Guid("dde37c19-c431-4406-a0c5-2670085b84b0"),
                            IsBeta = false,
                            IsReactLink = true,
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenInNewWindow = false,
                            Title = "Create Workspace"
                        },
                        new
                        {
                            Id = new Guid("bef737bc-7e50-4d6f-b662-8ae2fc511b76"),
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disabled = false,
                            Href = "/wca/infotrack/redirect-with-matter-info?resolvableEntryPoint=PropertyEnquiry&matterId={matterId}&actionstepOrg={actionstepOrg}",
                            IntegrationId = new Guid("5f9c8e97-deab-42f9-8678-0fb55da7d53c"),
                            IsBeta = false,
                            IsReactLink = false,
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenInNewWindow = true,
                            Title = "Property Inquiry"
                        },
                        new
                        {
                            Id = new Guid("da695c2e-0fd6-4bea-a845-4f27ecf686c5"),
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disabled = false,
                            Href = "/wca/infotrack/redirect-with-matter-info?resolvableEntryPoint=TitleSearch&matterId={matterId}&actionstepOrg={actionstepOrg}",
                            IntegrationId = new Guid("5f9c8e97-deab-42f9-8678-0fb55da7d53c"),
                            IsBeta = false,
                            IsReactLink = false,
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenInNewWindow = true,
                            Title = "Title Search"
                        },
                        new
                        {
                            Id = new Guid("d472cf72-6346-4cfc-9e3b-3e2efb5f19d2"),
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disabled = false,
                            Href = "/wca/infotrack/orders",
                            IntegrationId = new Guid("5f9c8e97-deab-42f9-8678-0fb55da7d53c"),
                            IsBeta = false,
                            IsReactLink = false,
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenInNewWindow = false,
                            Title = "Order History"
                        },
                        new
                        {
                            Id = new Guid("abb6d9db-516d-4e14-bec7-a34ce8e1dcfb"),
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disabled = false,
                            Href = "/api/conveyancing/old-settlement-calculator/redirect-with-matter-data/{actionstepOrg}/{matterId}",
                            IntegrationId = new Guid("d89cc4ac-e709-41a1-aa08-dd47c728b88f"),
                            IsBeta = false,
                            IsReactLink = false,
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenInNewWindow = true,
                            Title = "Settlement Calculator"
                        },
                        new
                        {
                            Id = new Guid("9de6f462-cd7d-4776-b253-ff5c170e9120"),
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disabled = false,
                            Href = "/wca/stamp-duty-calculator",
                            IntegrationId = new Guid("d89cc4ac-e709-41a1-aa08-dd47c728b88f"),
                            IsBeta = false,
                            IsReactLink = false,
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenInNewWindow = false,
                            Title = "Stamp Duty Calculator"
                        },
                        new
                        {
                            Id = new Guid("c4239316-39a5-4b44-9918-a73a223fe6df"),
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disabled = false,
                            Href = "/firsttitle/request-policy?actionsteporg={actionstepOrg}&matterid={matterId}",
                            IntegrationId = new Guid("4b5c4f21-ad76-4847-96a5-c067865fff5b"),
                            IsBeta = true,
                            IsReactLink = true,
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenInNewWindow = false,
                            Title = "Order Policy"
                        },
                        new
                        {
                            Id = new Guid("03a39a32-5fd3-4f09-a616-1fab239725ca"),
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disabled = false,
                            Href = "/globalx/property-information?actionsteporg={actionstepOrg}&matterid={matterId}&entryPoint=propertyinformation&embed=true",
                            IntegrationId = new Guid("40760360-a77c-4a5a-af9e-b03321909e80"),
                            IsBeta = true,
                            IsReactLink = true,
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenInNewWindow = true,
                            Title = "Property Information"
                        },
                        new
                        {
                            Id = new Guid("4b418018-0fb8-47b3-ac0d-0384e983ffc3"),
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Disabled = false,
                            Href = "/globalx/property-information?actionsteporg={actionstepOrg}&matterid={matterId}",
                            IntegrationId = new Guid("40760360-a77c-4a5a-af9e-b03321909e80"),
                            IsBeta = true,
                            IsReactLink = true,
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenInNewWindow = true,
                            Title = "All Products"
                        });
                });

            modelBuilder.Entity("WCA.Domain.Integrations.IntegrationLinkSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HideIntegrationLink")
                        .HasColumnType("bit");

                    b.Property<Guid>("IntegrationLinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IntegrationLinkId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.HasIndex("ActionstepOrgKey", "UserId");

                    b.ToTable("IntegrationLinkSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b03e1c2c-0f25-47f6-857f-c29a7cee1f4a"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegrationLink = false,
                            IntegrationLinkId = new Guid("e2648bf7-f4d4-48c3-8cf7-16338196d991"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 10,
                            UserId = "AllUsersId"
                        },
                        new
                        {
                            Id = new Guid("98c2c667-7fcf-4b35-be84-10e7dcf85311"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegrationLink = false,
                            IntegrationLinkId = new Guid("bef737bc-7e50-4d6f-b662-8ae2fc511b76"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 10,
                            UserId = "AllUsersId"
                        },
                        new
                        {
                            Id = new Guid("a0910127-adc7-43dd-958c-9801b7af09d8"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegrationLink = false,
                            IntegrationLinkId = new Guid("da695c2e-0fd6-4bea-a845-4f27ecf686c5"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 20,
                            UserId = "AllUsersId"
                        },
                        new
                        {
                            Id = new Guid("523d34f6-6151-4b2e-834c-7b1a34fbd6bf"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegrationLink = false,
                            IntegrationLinkId = new Guid("d472cf72-6346-4cfc-9e3b-3e2efb5f19d2"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 30,
                            UserId = "AllUsersId"
                        },
                        new
                        {
                            Id = new Guid("0bcd13c4-8320-464d-bd12-960c5aea1a18"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegrationLink = false,
                            IntegrationLinkId = new Guid("abb6d9db-516d-4e14-bec7-a34ce8e1dcfb"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 10,
                            UserId = "AllUsersId"
                        },
                        new
                        {
                            Id = new Guid("e35020dc-c06c-49c6-8328-ea2b07bda219"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegrationLink = false,
                            IntegrationLinkId = new Guid("9de6f462-cd7d-4776-b253-ff5c170e9120"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 20,
                            UserId = "AllUsersId"
                        });
                });

            modelBuilder.Entity("WCA.Domain.Integrations.IntegrationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HideIntegration")
                        .HasColumnType("bit");

                    b.Property<Guid>("IntegrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IntegrationId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.HasIndex("ActionstepOrgKey", "UserId");

                    b.ToTable("IntegrationSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09178645-669f-4d5d-9055-52166a6c9c23"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegration = false,
                            IntegrationId = new Guid("dde37c19-c431-4406-a0c5-2670085b84b0"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 10,
                            UserId = "AllUsersId"
                        },
                        new
                        {
                            Id = new Guid("0785f5b2-1a61-478b-a049-12f1c78ed155"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegration = false,
                            IntegrationId = new Guid("5f9c8e97-deab-42f9-8678-0fb55da7d53c"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 20,
                            UserId = "AllUsersId"
                        },
                        new
                        {
                            Id = new Guid("cb2c8dac-3177-4b23-894e-0833b5840b86"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegration = false,
                            IntegrationId = new Guid("d89cc4ac-e709-41a1-aa08-dd47c728b88f"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 30,
                            UserId = "AllUsersId"
                        },
                        new
                        {
                            Id = new Guid("f6a6daa1-096a-41f3-8357-82843da3555a"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegration = false,
                            IntegrationId = new Guid("4b5c4f21-ad76-4847-96a5-c067865fff5b"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 40,
                            UserId = "AllUsersId"
                        },
                        new
                        {
                            Id = new Guid("10db2716-631e-4445-a6ff-37c8f7e02d26"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegration = false,
                            IntegrationId = new Guid("40760360-a77c-4a5a-af9e-b03321909e80"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 50,
                            UserId = "AllUsersId"
                        },
                        new
                        {
                            Id = new Guid("8c3da309-cd33-4655-85ff-097fc4f1dfd2"),
                            ActionstepOrgKey = "AllOrgsKey",
                            DateCreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HideIntegration = false,
                            IntegrationId = new Guid("f411b5e1-2762-4374-ab81-228b7b13b22a"),
                            LastUpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SortOrder = 60,
                            UserId = "AllUsersId"
                        });
                });

            modelBuilder.Entity("WCA.Domain.Models.Account.WCAUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "AllUsersId",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a422a643-d96c-4b00-a4fa-9d1ca046a11f",
                            Email = "AllUsersId",
                            EmailConfirmed = false,
                            FirstName = "All",
                            LastName = "Users",
                            LockoutEnabled = true,
                            LockoutEnd = new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "ALLUSERSID",
                            NormalizedUserName = "ALLUSERSID",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "929f9124-f4ad-4131-9a4f-d826301d3e3b",
                            TwoFactorEnabled = false,
                            UserName = "AllUsersId"
                        });
                });

            modelBuilder.Entity("WCA.Domain.Models.ConveyancingSignupSubmission", b =>
                {
                    b.Property<int>("ConveyancingSignupSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ABN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AcceptedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConveyancingApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupportPlanOption")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConveyancingSignupSubmissionId");

                    b.ToTable("ConveyancingSignupSubmissions");
                });

            modelBuilder.Entity("WCA.Domain.Models.ReportSyncSignupSubmission", b =>
                {
                    b.Property<int>("ReportSyncSignupSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ABN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AcceptedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("AcknowledgedFeesAndCharges")
                        .HasColumnType("bit");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingContactFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingContactLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceContactFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceContactLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportSyncSignupSubmissionId");

                    b.HasIndex("ActionstepOrgKey");

                    b.HasIndex("CreatedById");

                    b.ToTable("ReportSyncSignupSubmissions");
                });

            modelBuilder.Entity("WCA.Domain.Models.Settlement.SettlementMatter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionstepData")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("ActionstepMatterId")
                        .HasColumnType("int");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettlementData")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SettlementMatters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepCredential", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany("Credentials")
                        .HasForeignKey("ActionstepOrgKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepCredentialSubstitution", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "ForOwner")
                        .WithMany()
                        .HasForeignKey("ForOwnerId");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "SubstituteWithOwner")
                        .WithMany()
                        .HasForeignKey("SubstituteWithOwnerId");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepOrg", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.PexaWorkspace", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXDocumentVersionState", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany()
                        .HasForeignKey("ActionstepOrgKey");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXMatterMapping", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany()
                        .HasForeignKey("ActionstepOrgKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXOrgSettings", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithOne()
                        .HasForeignKey("WCA.Domain.GlobalX.GlobalXOrgSettings", "ActionstepOrgKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "ActionstepSyncUser")
                        .WithMany()
                        .HasForeignKey("ActionstepSyncUserId");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "GlobalXAdmin")
                        .WithMany()
                        .HasForeignKey("GlobalXAdminId");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXTransactionState", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany()
                        .HasForeignKey("ActionstepOrgKey");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.InfoTrack.InfoTrackOrder", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany()
                        .HasForeignKey("ActionstepOrgKey");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "OrderedByWCAUser")
                        .WithMany()
                        .HasForeignKey("OrderedByWCAUserId");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.InfoTrack.InfoTrackOrderUpdateMessage", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.Integrations.Integration", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.Integrations.IntegrationLink", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Integrations.Integration", "Integration")
                        .WithMany("Links")
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.Integrations.IntegrationLinkSetting", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany()
                        .HasForeignKey("ActionstepOrgKey");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Integrations.IntegrationLink", "IntegrationLink")
                        .WithMany()
                        .HasForeignKey("IntegrationLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WCA.Domain.Integrations.IntegrationSetting", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany()
                        .HasForeignKey("ActionstepOrgKey");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Integrations.Integration", "Integration")
                        .WithMany()
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WCA.Domain.Models.ReportSyncSignupSubmission", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany()
                        .HasForeignKey("ActionstepOrgKey");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("WCA.Domain.Models.Settlement.SettlementMatter", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });
#pragma warning restore 612, 618
        }
    }
}
