// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WCA.Data;

namespace WCA.Data.Migrations
{
    [DbContext(typeof(WCADbContext))]
    [Migration("20200310111034_AddedGlobalXTransactionState")]
    partial class AddedGlobalXTransactionState
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("WCA")
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AccessTokenExpiryUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionstepOrgKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("int");

                    b.Property<string>("IdToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LockExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReceivedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActionstepOrgKey");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ActionstepCredentials");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepCredentialSubstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ForOwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubstituteWithOwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ForOwnerId");

                    b.HasIndex("SubstituteWithOwnerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ActionstepCredentialSubstitutions");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepOrg", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Key");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ActionstepOrgs");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.PexaWorkspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionstepOrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatterId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkspaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkspaceUri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("PexaWorkspaces");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXOrgSettings", b =>
                {
                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActionstepSyncUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DocumentSyncEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("GlobalXAdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LatestTransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxCodeIdNoGST")
                        .HasColumnType("int");

                    b.Property<int?>("TaxCodeIdWithGST")
                        .HasColumnType("int");

                    b.Property<bool>("TransactionSyncEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActionstepOrgKey");

                    b.HasIndex("ActionstepSyncUserId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GlobalXAdminId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("GlobalXOrgSettings");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXTransactionState", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreditForTransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GSTFreeDisbursementId")
                        .HasColumnType("int");

                    b.Property<int?>("GSTTaxableDisbursementId")
                        .HasColumnType("int");

                    b.Property<string>("GlobalXCustomerRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlobalXUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MatterBasedInvoiced")
                        .HasColumnType("bit");

                    b.Property<int>("MatterId")
                        .HasColumnType("int");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProcessingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProcessingStatusUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSubGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RetailGst")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SearchReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("WholesaleGst")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("WholesalePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("TransactionId");

                    b.HasIndex("ActionstepOrgKey");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MatterId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("GlobalXTransactionStates");
                });

            modelBuilder.Entity("WCA.Domain.InfoTrack.InfoTrackOrder", b =>
                {
                    b.Property<int>("InfoTrackOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ActionstepDisbursementStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionstepDisbursementStatusUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionstepDocumentUploadStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionstepDocumentUploadStatusUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionstepMatterId")
                        .HasColumnType("int");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InfoTrackAvailableOnline")
                        .HasColumnType("bit");

                    b.Property<string>("InfoTrackBillingTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackClientReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InfoTrackDateCompletedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InfoTrackDateOrderedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InfoTrackDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackDownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackFileHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InfoTrackIsBillable")
                        .HasColumnType("bit");

                    b.Property<string>("InfoTrackOnlineUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackOrderedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfoTrackParentOrderId")
                        .HasColumnType("int");

                    b.Property<string>("InfoTrackReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InfoTrackRetailerFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackRetailerFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackRetailerFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InfoTrackRetailerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackStatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InfoTrackSupplierFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackSupplierFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackSupplierFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderedByWCAUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Reconciled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InfoTrackOrderId");

                    b.HasIndex("ActionstepOrgKey");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderedByWCAUserId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("InfoTrackOrders");
                });

            modelBuilder.Entity("WCA.Domain.InfoTrack.InfoTrackOrderUpdateMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InfoTrackAvailableOnline")
                        .HasColumnType("bit");

                    b.Property<string>("InfoTrackBillingTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackClientReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InfoTrackDateCompletedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InfoTrackDateOrderedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InfoTrackDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackDownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackFileHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InfoTrackIsBillable")
                        .HasColumnType("bit");

                    b.Property<string>("InfoTrackOnlineUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfoTrackOrderId")
                        .HasColumnType("int");

                    b.Property<string>("InfoTrackOrderedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfoTrackParentOrderId")
                        .HasColumnType("int");

                    b.Property<string>("InfoTrackReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InfoTrackRetailerFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackRetailerFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackRetailerFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InfoTrackRetailerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTrackStatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InfoTrackSupplierFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackSupplierFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackSupplierFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFeeGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("InfoTrackTotalFeeTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProcessingStatusUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("InfoTrackOrderUpdateMessageHistory");
                });

            modelBuilder.Entity("WCA.Domain.Models.Account.WCAUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WCA.Domain.Models.ConveyancingSignupSubmission", b =>
                {
                    b.Property<int>("ConveyancingSignupSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ABN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AcceptedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConveyancingApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupportPlanOption")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConveyancingSignupSubmissionId");

                    b.ToTable("ConveyancingSignupSubmissions");
                });

            modelBuilder.Entity("WCA.Domain.Models.ReportSyncSignupSubmission", b =>
                {
                    b.Property<int>("ReportSyncSignupSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ABN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AcceptedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("AcknowledgedFeesAndCharges")
                        .HasColumnType("bit");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingContactFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingContactLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceContactFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceContactLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportSyncSignupSubmissionId");

                    b.HasIndex("ActionstepOrgKey");

                    b.HasIndex("CreatedById");

                    b.ToTable("ReportSyncSignupSubmissions");
                });

            modelBuilder.Entity("WCA.Domain.Models.Settlement.SettlementMatter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionstepData")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("ActionstepMatterId")
                        .HasColumnType("int");

                    b.Property<string>("ActionstepOrgKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettlementData")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SettlementMatters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepCredential", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany("Credentials")
                        .HasForeignKey("ActionstepOrgKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepCredentialSubstitution", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "ForOwner")
                        .WithMany()
                        .HasForeignKey("ForOwnerId");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "SubstituteWithOwner")
                        .WithMany()
                        .HasForeignKey("SubstituteWithOwnerId");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.ActionstepOrg", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.Actionstep.PexaWorkspace", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXOrgSettings", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithOne()
                        .HasForeignKey("WCA.Domain.GlobalX.GlobalXOrgSettings", "ActionstepOrgKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "ActionstepSyncUser")
                        .WithMany()
                        .HasForeignKey("ActionstepSyncUserId");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "GlobalXAdmin")
                        .WithMany()
                        .HasForeignKey("GlobalXAdminId");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.GlobalX.GlobalXTransactionState", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany()
                        .HasForeignKey("ActionstepOrgKey");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.InfoTrack.InfoTrackOrder", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany()
                        .HasForeignKey("ActionstepOrgKey");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "OrderedByWCAUser")
                        .WithMany()
                        .HasForeignKey("OrderedByWCAUserId");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.InfoTrack.InfoTrackOrderUpdateMessage", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("WCA.Domain.Models.ReportSyncSignupSubmission", b =>
                {
                    b.HasOne("WCA.Domain.Actionstep.ActionstepOrg", "ActionstepOrg")
                        .WithMany()
                        .HasForeignKey("ActionstepOrgKey");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("WCA.Domain.Models.Settlement.SettlementMatter", b =>
                {
                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("WCA.Domain.Models.Account.WCAUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });
#pragma warning restore 612, 618
        }
    }
}
