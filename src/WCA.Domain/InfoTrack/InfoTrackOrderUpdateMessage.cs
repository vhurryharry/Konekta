using System;
using System.ComponentModel.DataAnnotations.Schema;
using WCA.Domain.Abstractions;

namespace WCA.Domain.InfoTrack
{
    public enum ProcessingStatus
    {
        NotYetProcessed,
        ProcessingInProgress,
        Processed,
        ProcessedWithErrors,
        SkippedAsDuplicate
    }

    /// <summary>
    /// Represents an InfoTrack order update message as returned from InfoTrack.
    /// </summary>
    public class InfoTrackOrderUpdateMessage : EntityBase, IEntityWithId
    {
        #region Properties returned by InfoTrack
        public bool InfoTrackAvailableOnline { get; set; }
        public string InfoTrackBillingTypeName { get; set; }
        public string InfoTrackClientReference { get; set; }
        public DateTime InfoTrackDateOrderedUtc { get; set; }
        public DateTime? InfoTrackDateCompletedUtc { get; set; }
        public string InfoTrackDescription { get; set; }

        /// <summary>
        /// Gets or sets the order identifier as supplied by InfoTrack.
        /// This refers to a unique order ID, however multiple records may
        /// exist in this context with the same order ID because we may
        /// receive multiple messages referring to the status of a single
        /// order from InfoTrack.
        /// </summary>
        /// <value>
        /// The order identifier.
        /// </value>
        public int InfoTrackOrderId { get; set; }
        public int InfoTrackParentOrderId { get; set; }
        public string InfoTrackOrderedBy { get; set; }
        public string InfoTrackReference { get; set; }
        public string InfoTrackRetailerReference { get; set; }

        [Column(TypeName = "decimal(18, 2)")]
        public decimal InfoTrackRetailerFee { get; set; }

        [Column(TypeName = "decimal(18, 2)")]
        public decimal InfoTrackRetailerFeeGST { get; set; }

        [Column(TypeName = "decimal(18, 2)")]
        public decimal InfoTrackRetailerFeeTotal { get; set; }

        [Column(TypeName = "decimal(18, 2)")]
        public decimal InfoTrackSupplierFee { get; set; }

        [Column(TypeName = "decimal(18, 2)")]
        public decimal InfoTrackSupplierFeeGST { get; set; }

        [Column(TypeName = "decimal(18, 2)")]
        public decimal InfoTrackSupplierFeeTotal { get; set; }

        [Column(TypeName = "decimal(18, 2)")]
        public decimal InfoTrackTotalFee { get; set; }

        [Column(TypeName = "decimal(18, 2)")]
        public decimal InfoTrackTotalFeeGST { get; set; }

        [Column(TypeName = "decimal(18, 2)")]
        public decimal InfoTrackTotalFeeTotal { get; set; }

        public string InfoTrackServiceName { get; set; }
        public string InfoTrackStatus { get; set; }
        public string InfoTrackStatusMessage { get; set; }

#pragma warning disable CA1056 // Uri properties should not be strings
        public string InfoTrackDownloadUrl { get; set; }
        public string InfoTrackOnlineUrl { get; set; }
#pragma warning restore CA1056 // Uri properties should not be strings
        public bool InfoTrackIsBillable { get; set; }

        /// <summary>
        /// This is a hash generated by InfoTrack based on the timestamp that the file was
        /// last modified. It can be used to check whether downloading the file is necessary.
        /// E.g. If the hash provided differs from the one stored, then the file has changed
        /// and should be downloaded again.
        ///
        /// This is not a hash of the file contents. So it is only possible to perform comparisons
        /// between FileHash values supplied by InfoTrack.
        /// </summary>
        public string InfoTrackFileHash { get; set; }
        public string InfoTrackEmail { get; set; }
        #endregion

        #region Tracking Properties
        /// <summary>
        /// When the record was processed.
        /// </summary>
        public int Id { get; set; }
        public DateTime ProcessingStatusUpdatedUtc { get; private set; }

        public ProcessingStatus ProcessingStatus { get; private set; } = ProcessingStatus.NotYetProcessed;
        #endregion

        public void MarkProcessed()
        {
            ProcessingStatusUpdatedUtc = DateTime.UtcNow;
            ProcessingStatus = ProcessingStatus.Processed;
        }

        public void MarkProcessedWithErrors()
        {
            ProcessingStatusUpdatedUtc = DateTime.UtcNow;
            ProcessingStatus = ProcessingStatus.ProcessedWithErrors;
        }

        public void MarkProcessInProgress()
        {
            ProcessingStatusUpdatedUtc = DateTime.UtcNow;
            ProcessingStatus = ProcessingStatus.ProcessingInProgress;
        }

        public void MarkSkippedAsDuplicate()
        {
            ProcessingStatusUpdatedUtc = DateTime.UtcNow;
            ProcessingStatus = ProcessingStatus.SkippedAsDuplicate;
        }

        /// <summary>
        /// Compares key data fields to see if this message is a duplciate of the messageToTest.
        ///
        /// Non-InfoTrack message fields and identifiers such as Id (not InfoTrackOrderId), are not compared.
        /// </summary>
        /// <param name="messageToTest"></param>
        /// <returns>True if the supplied message is a duplicate, otherwise false.</returns>
        public bool IsDuplicateOf(InfoTrackOrderUpdateMessage messageToTest)
        {
            if (messageToTest is null)
            {
                return false;
            }

            if (InfoTrackAvailableOnline != messageToTest.InfoTrackAvailableOnline) { return false; }
            if (InfoTrackBillingTypeName != messageToTest.InfoTrackBillingTypeName) { return false; }
            if (InfoTrackClientReference != messageToTest.InfoTrackClientReference) { return false; }
            if (InfoTrackDateOrderedUtc != messageToTest.InfoTrackDateOrderedUtc) { return false; }
            if (InfoTrackDateCompletedUtc != messageToTest.InfoTrackDateCompletedUtc) { return false; }
            if (InfoTrackDescription != messageToTest.InfoTrackDescription) { return false; }
            if (InfoTrackOrderId != messageToTest.InfoTrackOrderId) { return false; }
            if (InfoTrackParentOrderId != messageToTest.InfoTrackParentOrderId) { return false; }
            if (InfoTrackOrderedBy != messageToTest.InfoTrackOrderedBy) { return false; }
            if (InfoTrackReference != messageToTest.InfoTrackReference) { return false; }
            if (InfoTrackRetailerReference != messageToTest.InfoTrackRetailerReference) { return false; }
            if (InfoTrackRetailerFee != messageToTest.InfoTrackRetailerFee) { return false; }
            if (InfoTrackRetailerFeeGST != messageToTest.InfoTrackRetailerFeeGST) { return false; }
            if (InfoTrackRetailerFeeTotal != messageToTest.InfoTrackRetailerFeeTotal) { return false; }
            if (InfoTrackSupplierFee != messageToTest.InfoTrackSupplierFee) { return false; }
            if (InfoTrackSupplierFeeGST != messageToTest.InfoTrackSupplierFeeGST) { return false; }
            if (InfoTrackSupplierFeeTotal != messageToTest.InfoTrackSupplierFeeTotal) { return false; }
            if (InfoTrackTotalFee != messageToTest.InfoTrackTotalFee) { return false; }
            if (InfoTrackTotalFeeGST != messageToTest.InfoTrackTotalFeeGST) { return false; }
            if (InfoTrackTotalFeeTotal != messageToTest.InfoTrackTotalFeeTotal) { return false; }
            if (InfoTrackServiceName != messageToTest.InfoTrackServiceName) { return false; }
            if (InfoTrackStatus != messageToTest.InfoTrackStatus) { return false; }
            if (InfoTrackStatusMessage != messageToTest.InfoTrackStatusMessage) { return false; }
            if (InfoTrackDownloadUrl != messageToTest.InfoTrackDownloadUrl) { return false; }
            if (InfoTrackOnlineUrl != messageToTest.InfoTrackOnlineUrl) { return false; }
            if (InfoTrackIsBillable != messageToTest.InfoTrackIsBillable) { return false; }
            if (InfoTrackFileHash != messageToTest.InfoTrackFileHash) { return false; }
            if (InfoTrackEmail != messageToTest.InfoTrackEmail) { return false; }

            return true;
        }
    }
}
