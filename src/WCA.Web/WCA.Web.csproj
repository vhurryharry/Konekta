<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <RuntimeIdentifiers>win-x64</RuntimeIdentifiers>
    <PackageId>WCA.Web</PackageId>
    <UserSecretsId>WorkCloudApplications</UserSecretsId>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <IsPackable>false</IsPackable>
    <TypeScriptToolsVersion>3.6</TypeScriptToolsVersion>
    <RootNamespace>WCA.Web</RootNamespace>
    <AssemblyName>WCA.Web</AssemblyName>
    <SpaRoot>client-app\</SpaRoot>
    <SpaRootOld>ClientApp\</SpaRootOld>
    <ApplicationInsightsAnnotationResourceId>/subscriptions/5ecfd557-3711-47ac-9bbe-9a95577cecbb/resourcegroups/prod-rg/providers/microsoft.insights/components/WCA.Web</ApplicationInsightsAnnotationResourceId>

    <LangVersion>8</LangVersion>
    <AddRazorSupportForMvc>true</AddRazorSupportForMvc>
  </PropertyGroup>

  <PropertyGroup>
    <!--Shared code analysis settings for solution-->
    <CodeAnalysisRuleSet>..\..\CodeAnalysis.ruleset</CodeAnalysisRuleSet>
    <NoWarn>AD0001;CS8034</NoWarn>
  </PropertyGroup>

  <PropertyGroup>
    <AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Workaround for: https://github.com/dotnet/sdk/issues/3146 -->
    <DepsFileGenerationMode>old</DepsFileGenerationMode>
  </PropertyGroup>

  <!-- Begin Old ClientApp support-->
  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRootOld)**" />
    <None Remove="$(SpaRootOld)**" />
    <None Include="$(SpaRootOld)**" Exclude="$(SpaRootOld)node_modules\**" />
  </ItemGroup>

  <PropertyGroup>
    <!-- File with mtime of last successful npm install -->
    <!-- Idea from https://stackoverflow.com/questions/35435041/run-npm-install-only-when-needed-and-or-partially -->
    <NpmInstallStampFile>node_modules/.install-stamp</NpmInstallStampFile>
  </PropertyGroup>

  <Target Name="NpmInstall" BeforeTargets="Build" Inputs="package.json" Outputs="$(NpmInstallStampFile)">
    <Exec Command="npm install" />
    <Touch Files="$(NpmInstallStampFile)" AlwaysCreate="true" />
  </Target>

  <Target Name="NpmBuildStyles" AfterTargets="NpmInstall">
    <!-- SCSS styles shared by MVC, Razor, and the Aurelia SPA -->
    <!-- Rebuild node-sass just in case. The binary is tested first and will only be rebuilt if necessary. -->
    <Exec Command="npm rebuild node-sass" />
    <Exec Command="npm run-script build-styles" />
  </Target>

  <Target Name="NpmWebpackApp" AfterTargets="ComputeFilesToPublish">
    <!-- The production front end SPA build for the OLD SPA -->
    <Exec Command="npm run-script webpack" />
  </Target>
  <!-- End Old ClientApp support-->

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="NSwagTypeScriptTypes" AfterTargets="Build">
    <Exec Command="$(NSwagExe_Core30) run nswag.json /variables:Configuration=$(Configuration),OutDir=$(OutDir)" />
  </Target>
  
  <Target Name="CopyTypeScriptTypesForReact" AfterTargets="NSwagTypeScriptTypes" BeforeTargets="ComputeFilesToPublish">
    <Copy SourceFiles="$(ProjectDir)ClientApp\services\wca-api-types.ts" DestinationFiles="$(ProjectDir)client-app\src\utils\wcaApiTypes.ts" />
  </Target>

  <PropertyGroup>
    <!-- File with mtime of last successful npm install -->
    <!-- Idea from https://stackoverflow.com/questions/35435041/run-npm-install-only-when-needed-and-or-partially -->
    <NpmInstallStampFileReact>client-app/node_modules/.install-stamp</NpmInstallStampFileReact>
  </PropertyGroup>
  
  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)build\**; $(SpaRoot)build-ssr\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

  <ItemGroup>
    <ProjectReference Include="..\Clients\WCA.Actionstep.AspNetCore\WCA.Actionstep.AspNetCore.csproj" />
    <ProjectReference Include="..\WCA.Core\WCA.Core.csproj" />
    <ProjectReference Include="..\WCA.Data\WCA.Data.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="9.0.0" />
    <PackageReference Include="Azure.Identity" Version="1.1.0" />
    <PackageReference Include="FluentValidation.AspNetCore" Version="8.6.1" />
    <PackageReference Include="MediatR" Version="7.0.0" />
    <PackageReference Include="MediatR.Extensions.Microsoft.DependencyInjection" Version="7.0.0" />
    <PackageReference Include="Microsoft.ApplicationInsights.AspNetCore" Version="2.12.1" />
    <PackageReference Include="Microsoft.ApplicationInsights.SnapshotCollector" Version="1.3.6" />

    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="3.1.18" />
    <PackageReference Include="Microsoft.AspNetCore.DataProtection.AzureStorage" Version="3.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.Hosting.Abstractions" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.OpenIdConnect" Version="3.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.UI" Version="3.1.0" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Api.Analyzers" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="3.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices" Version="3.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="3.1.1" />
    <PackageReference Include="Microsoft.Azure.AppConfiguration.AspNetCore" Version="3.0.0-preview-010560002-1165" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="3.1.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="3.1.1" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="3.1.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Configuration.AzureKeyVault" Version="3.1.1" />
    <PackageReference Include="Microsoft.Extensions.Logging.ApplicationInsights" Version="2.12.1" />
    <PackageReference Include="Microsoft.Extensions.Logging.AzureAppServices" Version="3.1.1" />

    <PackageReference Include="Microsoft.AspNetCore.ApplicationInsights.HostingStartup" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="3.1.1" />
    <PackageReference Include="Microsoft.BingMaps.V8.TypeScript" Version="2.0.3" />
    <PackageReference Include="Microsoft.FeatureManagement.AspNetCore" Version="1.0.0-preview-009000001-1251" />
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="3.1.1" />
    <PackageReference Include="NSwag.AspNetCore" Version="13.2.2" />
    <PackageReference Include="NSwag.CodeGeneration.TypeScript" Version="13.2.2" />
    <PackageReference Include="NSwag.MSBuild" Version="13.2.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="NWebsec.AspNetCore.Middleware" Version="2.0.0" />
    <PackageReference Include="SimpleExceptionHandling" Version="1.1.0" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="5.6.0" />
	<!-- <PackageReference Include="System.Security.Cryptography.Algorithms" Version="4.3.1" /> -->
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.9.8">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="2.9.8">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Text.Analyzers" Version="2.6.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Analyzers" Version="2.2.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Api.Analyzers" Version="2.2.6">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Analyzers" Version="3.1.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="WebEssentials.AspNetCore.Analyzers" Version="1.0.7">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <WCFMetadata Include="Connected Services" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="wwwroot\libman\" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="cypress\integration\*">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <Content Include="cypress\support\*">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <Content Remove="bundleconfig.json" />
    <Content Remove="wwwroot\favicon.ico" />
  </ItemGroup>

  <ItemGroup>
    <_ContentIncludedByDefault Remove="bundleconfig.json" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="wwwroot\.well-known\keybase.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="wwwroot\.well-known\robots.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="wwwroot\.well-known\security.txt">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <None Include="bundleconfig.json" />
    <None Include="wwwroot\favicon.ico" />
    <None Include="wwwroot\robots.txt" />
  </ItemGroup>

  <ItemGroup>
    <None Update="libwkhtmltox.dll">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>
</Project>